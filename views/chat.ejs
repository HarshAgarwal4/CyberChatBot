<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat with Vakil</title>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f0f2f5;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }

    .chat-container {
      width: 100%;
      max-width: 600px;
      height: 80vh;
      display: flex;
      flex-direction: column;
      border-radius: 15px;
      overflow: hidden;
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
      background: #fff;
    }

    .chat-header {
      background: #4CAF50;
      color: #fff;
      text-align: center;
      padding: 15px;
      font-size: 20px;
      font-weight: bold;
    }

    #chat-box {
      flex: 1;
      padding: 15px;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      gap: 10px;
      background: #fdfdfd;
    }

    .user,
    .bot {
      max-width: 75%;
      padding: 12px 18px;
      border-radius: 20px;
      line-height: 1.5;
      word-wrap: break-word;
    }

    .user {
      align-self: flex-end;
      background: #e0f0ff;
      color: #003366;
      border-bottom-right-radius: 5px;
    }

    .bot {
      align-self: flex-start;
      background: #f1f1f1;
      color: #222;
      border-bottom-left-radius: 5px;
    }

    .input-area {
      display: flex;
      border-top: 1px solid #ddd;
      background: #fff;
    }

    input {
      flex: 1;
      padding: 12px 15px;
      border: none;
      font-size: 15px;
      outline: none;
    }

    button {
      background: #4CAF50;
      color: #fff;
      border: none;
      padding: 0 15px;
      cursor: pointer;
      font-size: 15px;
      transition: background 0.3s;
    }

    button:hover {
      background: #45a049;
    }

    .mic-btn {
      background: #ff4b5c;
      margin-left: 5px;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 18px;
    }

    .mic-btn.active {
      background: #4CAF50;
    }

    pre code {
      background-color: #000;
      color: #fff;
      display: block;
      padding: 10px;
      border-radius: 8px;
      overflow-x: auto;
      font-family: monospace;
      font-size: 14px;
    }
  </style>
</head>

<body>
  <div class="chat-container">
    <div class="chat-header">Chat with Vakil</div>
    <div id="chat-box"></div>
    <div class="input-area">
      <input type="text" id="user-input" placeholder="Type your message..." />
      <button id="send-btn">Send</button>
      <button id="mic-btn" class="mic-btn">ðŸŽ¤</button>
    </div>
  </div>

  <script>
    const chatBox = document.getElementById("chat-box");
    const input = document.getElementById("user-input");
    const sendBtn = document.getElementById("send-btn");
    const micBtn = document.getElementById("mic-btn");

    let history = [
      { role: "user", parts: [{ text: "Hello" }] },
      { role: "model", parts: [{ text: "Great to meet you. What would you like to know?" }] }
    ];

    function appendMessage(sender, message) {
      const div = document.createElement("div");
      div.className = sender;
      let htmlOutput = marked.parse(message);
      div.innerHTML = htmlOutput;
      chatBox.appendChild(div);
      chatBox.scrollTop = chatBox.scrollHeight;
    }

    function speakText(text) {
      if (!window.speechSynthesis) return;
      window.speechSynthesis.cancel();

      const utterance = new SpeechSynthesisUtterance(text);
      utterance.rate = 1;   // normal speed
      utterance.pitch = 1;  // normal pitch
      utterance.volume = 1; // ensure full volume
      const voices = speechSynthesis.getVoices();
      if (voices.length > 0) {
        const preferred = voices.find(v => v.lang === "hi-IN") || voices.find(v => v.lang === "en-US");
        if (preferred) {
          utterance.voice = preferred;
          utterance.lang = preferred.lang;
        }
      } else {
        utterance.lang = "en-US";
      }

      window.speechSynthesis.speak(utterance);
    }
    speechSynthesis.onvoiceschanged = () => {
      console.log("Voices loaded:", speechSynthesis.getVoices());
    };


    async function sendMessage() {
      const query = input.value.trim();
      if (!query) return;

      appendMessage("user", query);
      input.value = "";
      history.push({ role: "user", parts: [{ text: query }] });

      try {
        const res = await fetch("/api/chat", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ query, history })
        });

        const data = await res.json();
        if (data.status === 1) {
          appendMessage("bot", data.reply);
          history.push({ role: "model", parts: [{ text: data.reply }] });
          speakText(data.reply);
        } else {
          appendMessage("bot", "Error: " + data.reply);
        }
      } catch (err) {
        console.error(err);
        appendMessage("bot", "Error sending message");
      }
    }

    sendBtn.addEventListener("click", sendMessage);
    input.addEventListener("keypress", (e) => {
      if (e.key === "Enter") sendMessage();
    });

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (SpeechRecognition) {
      const recognition = new SpeechRecognition();
      recognition.continuous = false;
      recognition.lang = 'hi-IN';
      recognition.interimResults = false;

      recognition.onstart = () => micBtn.classList.add("active");
      recognition.onend = () => micBtn.classList.remove("active");

      recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        input.value = transcript;
        sendMessage();
      };

      micBtn.addEventListener("click", () => {
        recognition.start();
      });
    } else {
      micBtn.disabled = true;
      micBtn.title = "Speech Recognition not supported";
    }
  </script>
</body>

</html>